{"version":3,"sources":["Components/Input/Index.jsx","Components/Result/index.jsx","Components/App/App.jsx","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","TextArea","textarea","MarkedInput","onChange","ResultArea","MarkdownResult","content","source","AppContainer","EditorContainer","App","props","state","setContent","bind","event","this","setState","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m4BAEA,IAAMA,EAAYC,IAAOC,IAAV,KAOTC,EAAQF,IAAOC,IAAV,KAWLE,EAAWH,IAAOI,SAAV,KAgBCC,EANK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,kBAACP,EAAD,KACI,kBAACG,EAAD,cACA,kBAACC,EAAD,CAAUG,SAAUA,M,siBC7B5B,IAAMP,EAAYC,IAAOC,IAAV,KAMTC,EAAQF,IAAOC,IAAV,KAWLM,EAAaP,IAAOC,IAAV,KAiBDO,EAVQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,kBAAC,EAAD,KACI,kBAAC,EAAD,gBACA,kBAACF,EAAD,KACI,kBAAC,IAAD,CACIG,OAAQD,O,0aC3BxB,IAAME,EAAeX,IAAOC,IAAV,KAQZC,EAAQF,IAAOC,IAAV,KAMLW,EAAkBZ,IAAOC,IAAV,KA2CNY,E,kDAnCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXN,QAAS,IAGX,EAAKO,WAAa,EAAKA,WAAWC,KAAhB,gBAPD,E,uDAURC,GACTC,KAAKC,SAAS,CAAEX,QAASS,EAAMG,OAAOC,U,+BAG9B,IACAb,EAAYU,KAAKJ,MAAjBN,QAER,OACE,kBAACE,EAAD,KACE,kBAAC,EAAD,0BACA,kBAACC,EAAD,KACE,kBAAC,EAAD,CACEN,SAAUa,KAAKH,aAEjB,kBAAC,EAAD,CACEP,QAASA,U,GA3BHc,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f5008b3b.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nconst Container = styled.div`\n    width: 50%;\n    height:100%;\n    border-right: 1.5px solid black;\n    padding: 13px;\n`;\n\nconst Title = styled.div`\n    font-size: 22px;\n    font-weight: 600;\n    border-bottom: 1px solid rgba(15, 15, 15, 0.3);\n    background: #0a0a0a;\n    color: #f2f2f2;\n    text-align:center;\n    margin-bottom: 1em;\n    padding: 8px 0;\n`;\n\nconst TextArea = styled.textarea`\n    width: 100%;\n    height:100%;\n    background:none;\n    border: none;\n    resize: none;\n    outline: none;\n    font-size: 17px\n`;\n\nconst MarkedInput = ({ onChange }) =>\n    <Container>\n        <Title>Input</Title>\n        <TextArea onChange={onChange} />\n    </Container>\n\nexport default MarkedInput;","import React from 'react';\nimport styled from 'styled-components';\nimport Markdown from 'react-markdown';\n\nconst Container = styled.div`\n  width: 50%;\n  height: 100%;\n  padding: 13px;\n`;\n\nconst Title = styled.div`\n  font-size: 22px;\n  font-weight: 600;\n  margin-bottom: 1em;\n  padding: 8px 0;\n  background: #0a0a0a;\n  color: #f2f2f2;\n  text-align: center;\n  border-bottom: 1px solid rgba(15, 15, 15, 0.3);\n`;\n\nconst ResultArea = styled.div`\n  width: 100%;\n  height: 100%;\n  border: none;\n  font-size: 17px;\n`;\n\nconst MarkdownResult = ({ content }) =>\n    <Container>\n        <Title>Preview</Title>\n        <ResultArea>\n            <Markdown\n                source={content}\n            />\n        </ResultArea>\n    </Container>\n\nexport default MarkdownResult;","import React, { Component } from 'react';\nimport './App.css';\nimport MarkedInput from '../Input/Index'\nimport styled from 'styled-components';\nimport MarkedResult from '../Result/index'\n\nconst AppContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Title = styled.div`\n  font-size: 60px;\n  margin-bottom:1em;\n  font-weight:700;\n`;\n\nconst EditorContainer = styled.div`\n  width:100%;\n  height:100%;\n  display: flex;\n`;\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: ''\n    }\n\n    this.setContent = this.setContent.bind(this);\n  }\n\n  setContent(event) {\n    this.setState({ content: event.target.value });\n  }\n\n  render() {\n    const { content } = this.state;\n\n    return (\n      <AppContainer>\n        <Title>Markdown Previwer</Title>\n        <EditorContainer>\n          <MarkedInput\n            onChange={this.setContent}\n          />\n          <MarkedResult\n            content={content}\n          />\n        </EditorContainer>\n\n      </AppContainer>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}